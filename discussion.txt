Runtime:

When calculating the Big O notation for a particular algorithm, it’s necessary to consider the length of time it takes for the algorithm to run as the algorithm’s workload approaches infinity. You can think of the workload as the number of tasks required to complete a job. What determines the workload of figuring out whether your box of animal crackers contains an elephant? 

How many animal crackers you have.

Order the following runtimes in descending order of efficiency (that is, fastest runtimes first, slowest last) as n approaches infinity:

O(1)
O(log n)
O(n)
O(n log n)
O(n^2)
O(2^n)

Stacks and Queues:

In the following cases, would a stack or queue be a more appropriate data structure?
Stack: The process of loading and unloading pallets onto a flatbed truck
Queue: Putting bottle caps on bottles of beer as they roll down an assembly line
Queue: Calculating the solution to this mathematical expression: 2 + (7 * 4) - (3 / 2)
Describe two more situations where a queue would be an appropriate data structure.
    Print jobs, Breadth First Search
Describe two more situations where a stack would be an appropriate data structure.
    Balancing parentheses, Depth First Search


Linked Lists:

Given the linked list below, which are the nodes? What is the data for each node? Where is the head? Where is the tail? (Please be as specific as possible — exactly which parts of the diagram correspond to each part? Arrows? Boxes? Text?)

Node data: apple, berry, cherry
Head: apple node
Tail: Cherry node

Nodes: Boxes
Node.data = text in boxes


What’s the difference between doubly- and singly-linked lists?
    Doubly linked lists can be traversed forward and in reverse

Why is it faster to append to a linked list if we keep track of the tail as an attribute?
    Because then we don't need to traverse the entire list each time we want to append something

Trees:


Given the tree above, in what order would a Breadth First Search (BFS) algorithm visit each node until finding burritos (starting at food)? (Assume nodes are enqueued in left-to-right order.) Just list the order of nodes visited; no need to recreate the state of the algorithm data in your answer.
    Food > Italian > Indian > Mexican > Lasagna > Pizza > Tikka Masala > Saag > Burritos

Given the tree above, in what order would a Depth First Search (DFS) algorithm visit each node until finding Chicago-style (starting at food)? (Assume nodes are pushed in left-to-right order.) Just list the order of nodes visited; no need to recreate the state of the algorithm data in your answer.
    Food > Italian > Lasagna > Pizza > Thin Crust > Chicago style

How is a binary search tree different from other trees?
    Binary search trees can have at max 2 brances coming from each node and the branches are arranged in a meaningful way (left:greater than, right:less than)
